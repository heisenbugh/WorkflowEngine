// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkflowEngine.DataAccess.DbContexts;

namespace WorkflowEngine.DataAccess.DbContexts.Migrations
{
    [DbContext(typeof(EfCoreNpgsqlWorkflowEngineDbContext))]
    partial class EfCoreNpgsqlWorkflowEngineDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("WorkflowEngine.Core.Entities.Action", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action_type");

                    b.Property<string>("CodeName")
                        .HasColumnType("text")
                        .HasColumnName("code_name");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("action");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.EmailNotificationTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BccAddresses")
                        .HasColumnType("text")
                        .HasColumnName("bcc_addresses");

                    b.Property<string>("CcAddresses")
                        .HasColumnType("text")
                        .HasColumnName("cc_addresses");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("content_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("ToAddresses")
                        .HasColumnType("text")
                        .HasColumnName("to_addresses");

                    b.HasKey("Id");

                    b.HasIndex("ContentId")
                        .IsUnique();

                    b.ToTable("email_notification_template");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.NotificationContentTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.HasKey("Id");

                    b.ToTable("notification_content_template");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.Path", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("action_id");

                    b.Property<Guid>("FromStateId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_state_id");

                    b.Property<Guid>("ToStateId")
                        .HasColumnType("uuid")
                        .HasColumnName("to_state_id");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("FromStateId");

                    b.HasIndex("ToStateId");

                    b.ToTable("path");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.PathUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PathId")
                        .HasColumnType("uuid")
                        .HasColumnName("path_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PathId");

                    b.HasIndex("UserId");

                    b.ToTable("path_user");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("process");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.ProcessAdmin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid")
                        .HasColumnName("admin_id");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("ProcessId");

                    b.ToTable("process_admin");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.Progress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<Guid?>("PathId")
                        .HasColumnType("uuid")
                        .HasColumnName("path_id");

                    b.Property<DateTime>("ProgressDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("progress_date");

                    b.Property<Guid?>("ProgressedById")
                        .HasColumnType("uuid")
                        .HasColumnName("progressed_by_id");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("request_id");

                    b.HasKey("Id");

                    b.HasIndex("PathId");

                    b.HasIndex("ProgressedById");

                    b.HasIndex("RequestId");

                    b.ToTable("progress");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CurrentStateId")
                        .HasColumnType("uuid")
                        .HasColumnName("current_state_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("request_date");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CurrentStateId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProcessId");

                    b.ToTable("request");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.RequestData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("request_id");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("request_data");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.SmsNotificationTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("content_id");

                    b.Property<string>("GsmNumbers")
                        .HasColumnType("text")
                        .HasColumnName("gsm_numbers");

                    b.Property<string>("Header")
                        .HasColumnType("text")
                        .HasColumnName("header");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("Id");

                    b.HasIndex("ContentId")
                        .IsUnique();

                    b.ToTable("sms_notification_template");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CodeName")
                        .HasColumnType("text")
                        .HasColumnName("code_name");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PartialViewName")
                        .HasColumnType("text")
                        .HasColumnName("partial_view_name");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.Property<string>("StateType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state_type");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("state");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.StateUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uuid")
                        .HasColumnName("state_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("state_user");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.Action", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.Process", "Process")
                        .WithMany("Actions")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Process");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.EmailNotificationTemplate", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.NotificationContentTemplate", "Content")
                        .WithOne("EmailNotificationTemplate")
                        .HasForeignKey("WorkflowEngine.Core.Entities.EmailNotificationTemplate", "ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.Path", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.Action", "Action")
                        .WithMany("Paths")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowEngine.Core.Entities.State", "FromState")
                        .WithMany("FromPaths")
                        .HasForeignKey("FromStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowEngine.Core.Entities.State", "ToState")
                        .WithMany("ToPaths")
                        .HasForeignKey("ToStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("FromState");

                    b.Navigation("ToState");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.PathUser", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.Path", "Path")
                        .WithMany("PathUsers")
                        .HasForeignKey("PathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowEngine.Core.Entities.User", "User")
                        .WithMany("PathUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Path");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.ProcessAdmin", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.User", "Admin")
                        .WithMany("ProcessAdmins")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowEngine.Core.Entities.Process", "Process")
                        .WithMany("ProcessAdmins")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.Progress", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.Path", "Path")
                        .WithMany("Progress")
                        .HasForeignKey("PathId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WorkflowEngine.Core.Entities.User", "ProgressedBy")
                        .WithMany("Progress")
                        .HasForeignKey("ProgressedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WorkflowEngine.Core.Entities.Request", "Request")
                        .WithMany("Progress")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Path");

                    b.Navigation("ProgressedBy");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.Request", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.State", "CurrentState")
                        .WithMany("Requests")
                        .HasForeignKey("CurrentStateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WorkflowEngine.Core.Entities.User", "Owner")
                        .WithMany("Requests")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowEngine.Core.Entities.Process", "Process")
                        .WithMany("Requests")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentState");

                    b.Navigation("Owner");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.RequestData", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.Request", "Request")
                        .WithOne("Data")
                        .HasForeignKey("WorkflowEngine.Core.Entities.RequestData", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.SmsNotificationTemplate", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.NotificationContentTemplate", "Content")
                        .WithOne("SmsNotificationTemplate")
                        .HasForeignKey("WorkflowEngine.Core.Entities.SmsNotificationTemplate", "ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.State", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.Process", "Process")
                        .WithMany("States")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Process");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.StateUser", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.State", "State")
                        .WithMany("StateUsers")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowEngine.Core.Entities.User", "User")
                        .WithMany("StateUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.Action", b =>
                {
                    b.Navigation("Paths");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.NotificationContentTemplate", b =>
                {
                    b.Navigation("EmailNotificationTemplate");

                    b.Navigation("SmsNotificationTemplate");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.Path", b =>
                {
                    b.Navigation("PathUsers");

                    b.Navigation("Progress");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.Process", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("ProcessAdmins");

                    b.Navigation("Requests");

                    b.Navigation("States");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.Request", b =>
                {
                    b.Navigation("Data");

                    b.Navigation("Progress");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.State", b =>
                {
                    b.Navigation("FromPaths");

                    b.Navigation("Requests");

                    b.Navigation("StateUsers");

                    b.Navigation("ToPaths");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.User", b =>
                {
                    b.Navigation("PathUsers");

                    b.Navigation("ProcessAdmins");

                    b.Navigation("Progress");

                    b.Navigation("Requests");

                    b.Navigation("StateUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
